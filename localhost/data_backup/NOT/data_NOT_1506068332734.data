id§NOT_1506068332734°datum§22.09.2017°DatumE§2017-09-22-00-00-00_NOT_1506068332734°art§Anleitung°name§Java Keystore / Key Entry Types / keytool - Cheat Sheet°info§<p><a href="https://docs.oracle.com/javase/7/docs/api/java/security/KeyStore.html">https://docs.oracle.com/javase/7/docs/api/java/security/KeyStore.html</a></p><p><a href="https://www.digitalocean.com/community/tutorials/java-keytool-essentials-working-with-java-keystores">https://www.digitalocean.com/community/tutorials/java-keytool-essentials-working-with-java-keystores</a></p>°text§<p><a href="https://docs.oracle.com/javase/7/docs/api/java/security/KeyStore.html">https://docs.oracle.com/javase/7/docs/api/java/security/KeyStore.html</a></p><p><a href="https://www.digitalocean.com/community/tutorials/java-keytool-essentials-working-with-java-keystores">https://www.digitalocean.com/community/tutorials/java-keytool-essentials-working-with-java-keystores</a></p><br/>-----<br/><p style="color: rgb(53, 56, 51); font-family: Arial, Helvetica, sans-serif; font-size: 12.16px;">A&nbsp;<code style="font-size: 1.2em;">KeyStore</code>&nbsp;manages different types of entries. Each type of entry implements the&nbsp;<code style="font-size: 1.2em;">KeyStore.Entry</code>&nbsp;interface. Three basic&nbsp;<code style="font-size: 1.2em;">KeyStore.Entry</code>&nbsp;implementations are provided:</p><ul style="color: rgb(53, 56, 51); font-family: Arial, Helvetica, sans-serif; font-size: 12.16px;"><li><b>KeyStore.PrivateKeyEntry</b><p>This type of entry holds a cryptographic&nbsp;<code style="font-size: 1.2em;">PrivateKey</code>, which is optionally stored in a protected format to prevent unauthorized access. It is also accompanied by a certificate chain for the corresponding public key.</p><p>Private keys and certificate chains are used by a given entity for self-authentication. Applications for this authentication include software distribution organizations which sign JAR files as part of releasing and/or licensing software.</p></li><li><b>KeyStore.SecretKeyEntry</b><p>This type of entry holds a cryptographic&nbsp;<code style="font-size: 1.2em;">SecretKey</code>, which is optionally stored in a protected format to prevent unauthorized access.</p></li><li><b>KeyStore.TrustedCertificateEntry</b><p>This type of entry contains a single public key&nbsp;<code style="font-size: 1.2em;">Certificate</code>&nbsp;belonging to another party. It is called a&nbsp;<i>trusted certificate</i>&nbsp;because the keystore owner trusts that the public key in the certificate indeed belongs to the identity identified by the&nbsp;<i>subject</i>&nbsp;(owner) of the certificate.</p><p>This type of entry can be used to authenticate other parties.</p></li></ul><p style="color: rgb(53, 56, 51); font-family: Arial, Helvetica, sans-serif; font-size: 12.16px;">Each entry in a keystore is identified by an "alias" string. In the case of private keys and their associated certificate chains, these strings distinguish among the different ways in which the entity may authenticate itself. For example, the entity may authenticate itself using different certificate authorities, or using different public key algorithms.</p>°files§